import requests

class Billplz():
    """
    Billplz Client

    Base class for interfacing Billplz API with convenience methods
    """

    def __init__(self, api_key, collection_id, test=False):
        """
        Initialize an instance of the Billplz Client

        :param api_key: Authorized API secret key to your billplz account
        :param collection_id: Collection ID that will contain the bills generated by this client
        :param test: Default False - Sets the base_url to live endpoint. True sets base_url to sandbox endpoint.

        Returns initialized instance of the Billplz Client
        """
        self.api_key = api_key
        self.collection_id = collection_id
        if test:
            self.base_url = self.__get_sandbox_endpoint()
        else:
            self.base_url = self.__get_live_endpoint()

    def get_collection(self, collection_id=None):
        """
        Get A Collection

        :param collection_id: Provide a collection_id to return or it will use default collection_id

        Returns tuple (success_status, data)
        """
        if not collection_id:
            collection_id = self.collection_id

        try:
            response = requests.get(
                f'{self.base_url}/v4/collections/{collection_id}',
                auth=self.__generate_authorization_headers()
            )

            data = response.json()

            return (True, data)

        except:
            return (False, None)

    def __generate_authorization_headers(self):
        """
        Returns preset authorization headers
        """
        auth_key = requests.auth.HTTPBasicAuth(self.api_key, ':')
        return auth_key

    def __get_sandbox_endpoint(self):
        """
        Returns the sandbox API base URL
        """
        return "https://www.billplz-sandbox.com/api"

    def __get_live_endpoint(self):
        """
        Returns the live API base URL
        """
        return "https://www.billplz.com/api"
